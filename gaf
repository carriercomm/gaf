#!/bin/bash

die() { echo "FATAL: $@" >&2; exit 1; }
warn() { echo "WARNING: $@" >&2; }

red=`git config --get-color "" "red bold"`
blue=`git config --get-color "" "blue bold"`
green=`git config --get-color "" "green bold"`
reset=`git config --get-color "" "reset"`
paint() { printf "$1"; printf "$2"; printf "$reset"; }

# GAF_REPO env var overrides default location
GAF_REPO=${GAF_REPO:-$HOME/.gaf}
[[ $GAF_REPO =~ ^/ ]] || die "GAF_REPO should be an absolute path"
# GAF_FLIST is the "locally checked out feature list"; can be overridden
GAF_FLIST=${GAF_FLIST:-$GAF_REPO.flist}

# ----------------------------------------------------------------------
# service routines

in_dir() {
    local opwd=$PWD
    cd $1; shift
    "$@"; local rc=$?
    cd $opwd
    return $rc
}

git_status_clean() {
    local t=$(cd $GAF_REPO; git status --porcelain 2>&1)
    [ -z "$t" ]
}

git_checkout() {
    local b=$1
    # existing local or remote branch (create tracking branch if needed)
    git checkout -q -f $b 2>/dev/null && return

    # create not asked?  return error
    [ "$2" = "-b" ] || { warn "branch '$1' does not exist"; return 1; }

    # new branch; create it based on master
    git checkout -q -f master
    git checkout -q -b $b || die "checkout '$b' failed"

    # XXX we don't cover the case where a branch name happens to be the same as a path name in the currently checked out branch!
}

git_commit() {
    if [ -n "$(git status --porcelain)" ]
    then
        git add -A
        git commit -m "$branch: $COMMIT_MESSAGE"
    fi
}

update_list() {
    # generic "update list without duplicates"
    grep "$1" $3 >&/dev/null || {
        echo "$2" >> $3
    }
}

# TODO: orcish maneuver in 4 places below
save_meta() {
    # called from copy_to_repo; PWD is original PWD not GAF_REPO

    # first, get rid of ignored files.  No combination of 'git clean' options
    # can remove a file that is specified inside a .gitignore file deep within
    # an *untracked* directory; ls-files does.
    (cd $GAF_REPO; git ls-files --exclude-standard -o -i | xargs rm -f)

    (cd $GAF_REPO; find . -name .git -prune -o -print ) | sort | perl -lne '
        @s = stat($_) or next;
        print "fail $_" unless @s;
        $m = $s[2] & 07777;
        $u = ( $> == $s[4] ) ? "" : getpwuid $s[4];
        $g = ( $) == $s[5] ) ? "" : getgrgid $s[5];
        printf "%04o\t%s\t%s\t%s\n", $m, $u, $g, $_;
    ' > $GAF_REPO/.gaf-meta
}
restore_meta() {
    # called from copy_from_repo; PWD is GAF_REPO, arg-1 is target
    [ -f .gaf-meta ] && perl -lne '
        BEGIN { chdir +shift; }
        ($m, $u, $g, $n) = split /\t/, $_, 4;
        chmod oct($m), $n;
        next if $>;
        $u = ($u ? getpwnam($u) : $>);
        $g = ($g ? getgrnam($g) : $));
        chown $u, $g, $n;
    ' $1 < .gaf-meta
}

# ----------------------------------------------------------------------
# copy files to repo from 'working' copies

copy_to_repo() {
    local src="$1"

    # branch has already been checkedout in caller

    # if file/dir to copy is specified
    if [ -n "$src" ]
    then
        # copy $src with full path into $dst (not just the last node).  That
        # is, copying a/b/c to d/e will result in d/e/a/b/c, not d/e/c.
        tar -cf - --exclude .git "$src" | (cd $GAF_REPO; tar -xf -)
        save_meta
        return
    fi

    # else, just refresh files/dirs already in the branch
    touch .gaf-meta # a bit of a kludge but better than a grep -v in the middle of the next pipe!
    # file list                  | from orig PWD  | to $GAF_REPO
    (cd $GAF_REPO; git ls-files) | tar -cf - -T - | tar -C $GAF_REPO -xf -
    save_meta
}

# ----------------------------------------------------------------------
# copy files from repo to 'working' copies

copy_from_repo() {
    git_checkout $1 && git archive HEAD | tar -C $opwd -xf -
    restore_meta $opwd
}

# ----------------------------------------------------------------------
# core commands

## init:create $GAF_REPO (default: ~/.gaf)
gaf_init() {
    [ -d $GAF_REPO ] || git init $GAF_REPO
    cd $GAF_REPO
    git rev-parse --verify --quiet master >/dev/null && exit 0

    git commit --allow-empty -m start &&
    git tag start &&
    exit 0

    die "some error in init; see previous messages"
}

## list:list gaf features available (mark features in flist with '*')
gaf_list() {
    cd $GAF_REPO 2>/dev/null || die "'cd' failed; '\$GAF_REPO' not set?"
    for f in $(git for-each-ref '--format=%(refname:short)' refs/heads | sort)
    do
        grep "^$f$" $GAF_FLIST >&/dev/null && printf "* " || printf "  "
        echo $f
    done
    exit 0
}

## save:save feature file/dir-list...
## save:save feature    # recopy only files known to branch
## save:save            # save all features in flist
## save:(uses $COMMIT_MESSAGE if set)
gaf_save() {
    git_status_clean || die "gaf repo is not clean"

    branch=$1
    shift

    in_dir $GAF_REPO git_checkout $branch -b

    if [ -z "$1" ]  # no args
    then
        COMMIT_MESSAGE=${COMMIT_MESSAGE:-"refresh"}
        set `$0 manifest $branch`
    else
        COMMIT_MESSAGE=${COMMIT_MESSAGE:-"MANIFEST: $*"}
    fi
    for lfd     # list of files/dirs
    do
        lfd=${lfd%/}    # remove any trailing slash
        [ -e "$lfd" ] || { warn "'$lfd' does not exist; skipping"; continue; }

        copy_to_repo "$lfd"
    done

    in_dir $GAF_REPO git_commit
    update_list "^$branch$" $branch $GAF_FLIST
}

## restore:[feature]; restore named feature or all features in flist
gaf_restore() {
    git_status_clean || die "gaf repo is not clean"

    [ -n "$1" ] || set `cat $GAF_FLIST`

    for branch
    do
        # first, the normal files
        in_dir $GAF_REPO copy_from_repo $branch

        update_list "^$branch$" $branch $GAF_FLIST
    done
}

## cycle:for each remote(fetch, for each feature in flist(save, merge, restore))
gaf_cycle() {
    git_status_clean || die "gaf repo is not clean"

    [ "$PWD" = "$HOME" ] || die "you're not at \$HOME!"

    local remote        # no pun intended!
    for remote in `$0 remote`
    do
        paint $blue "$remote: "
        $0 fetch $remote

        for f in `cat $GAF_FLIST`
        do
            echo -n $f...
            $0 save $f
            $0 rebase $remote/$f  >&/dev/null || die "rebase '$f' on "$remote" failed"
            $0 restore $f
        done
        echo
    done
}

## diff:[patt] diff all features in flist or just those matching pattern
gaf_diff() {
    git_status_clean || die "gaf repo is not clean"

    if [ -z "$1" ]   # no arguments given
    then
        list="`cat $GAF_FLIST`"
        set -- "--stat"
    else
        list="`cat $GAF_FLIST | grep -i $1`"
        shift
    fi

    for branch in $list     # git branches can't have spaces in them anyway, thank God!
    do
        in_dir $GAF_REPO git_checkout $branch || continue
        copy_to_repo
        git_status_clean && continue

        # rats; old git doesn't do "git branch --list -v -v $branch"!
        in_dir $GAF_REPO git branch -v -v | grep " $branch "
        in_dir $GAF_REPO git diff "$@"
    done
    # clean things up, whatever the branch may be
    git_status_clean || in_dir $GAF_REPO git checkout -f
}

## remove:feature file/dir...
gaf_remove() {
    git_status_clean || die "gaf repo is not clean"

    branch=$1
    shift

    [ -z "$1" ] && die "need file/dir list to remove"

    in_dir $GAF_REPO git_checkout $branch || die "checkout '$branch' failed"
    in_dir $GAF_REPO git rm -rf "$@"      || die "git rm -rf failed"
    COMMIT_MESSAGE="MANIFEST- $*"
    in_dir $GAF_REPO git_commit

    # clean things up, whatever the branch may be
    git_status_clean || in_dir $GAF_REPO git checkout -f
}

## manifest:manifest feature; print the manifest
gaf_manifest() {
    cd $GAF_REPO 2>/dev/null || die "'cd' failed; '\$GAF_REPO' not set?"
    local b=$1 || die "gaf manifest needs feature name"
    git log --oneline $b | tac | grep -o "$b: MANIFEST. .*" | perl -lane '
        shift @F; if (shift(@F) eq "MANIFEST-") {
            map { delete $s{$_} } @F
        } else {
            map { $s{$_} = 1 } @F
        }
        END { map { print } sort keys %s; }
    '
}

## untracked:[feature]; find untracked files (somewhat inefficient)
# this is somewhat inefficient but elegant enough that I don't care
gaf_untracked() {
    local od=$PWD; cd $GAF_REPO
    git_status_clean || die "gaf repo is not clean"

    [ -n "$1" ] || set `cat $GAF_FLIST`

    # make a detached head from the first "feature"
    git checkout $(git rev-parse $1) >&/dev/null
    shift
    for f
    do
        # remove the one file that is sure to conflict
        git rm .gaf-meta >&/dev/null; git commit -m remove-meta >&/dev/null
        # then merge all the others in to it
        git merge $f >&/dev/null || die "merge '$f' failed"
    done

    # now run 'git status' with $od as the "work tree"
    ( cd $od; git -p --git-dir=$GAF_REPO/.git --work-tree=$PWD status )

    # cleanup and exit
    git checkout -f master >&/dev/null
}

gaf_help() {
    cat <<EOF
gaf -- gitify arbitrary files

Run "gaf _commands" or use zsh completion to get help.  See
http://gitolite.com/gaf for more features and details.

EOF
echo -n "$GAF_PLUGIN_HELP"
    exit 1
}

# ----------------------------------------------------------------------
# extra commands
## find:pattern; find which feature contains matching filenames
gaf_find() {
    cd $GAF_REPO
    patt=$1; shift
    [ -n "$1" ] || set `git for-each-ref '--format=%(refname:short)' refs/heads | sort`
    for b
    do
        git ls-tree -r -t $b | cut -f2 | egrep -i "$patt" | while read f
        do
            printf "$b\t$f\n"
        done
    done
}

gaf__commands() {
    cat $0 | grep '^## ' | cut -c4-
}

# ----------------------------------------------------------------------
# main

# just a fancy include mechanism with some tight unstated rules; ignore!
for p in $0-*.plugin
do
    [ -r $p ] && source $p
done

[ -n "$1" ] || gaf_help
[ "$1" = "-h" ] && gaf_help

cmd=$1
shift

if typeset -f gaf_$cmd >/dev/null
then
    # 'save' with absolutely no arguments is a special case
    if [ $cmd = save ] && [ -z "$1" ]
    then
        for f in `cat $GAF_FLIST`
        do
            gaf_save $f
        done
    else
        gaf_$cmd "$@"
    fi
else
    cd $GAF_REPO
    git $cmd "$@"
fi
